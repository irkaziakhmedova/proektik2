import pytest
from unittest.mock import MagicMock, AsyncMock
from final import save_task, format_deadline, get_activity_data, add_task, list_tasks

@pytest.fixture
def mock_cursor():
    """–ú–æ–∫ –¥–ª—è –∫—É—Ä—Å–æ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    return MagicMock()

@pytest.fixture
def mock_conn(mock_cursor):
    """–ú–æ–∫ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = MagicMock()
    conn.cursor.return_value = mock_cursor
    return conn

@pytest.fixture
def user_id():
    """–¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return 12345

@pytest.fixture
def test_task_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏."""
    return {
        'title': 'Test Task',
        'description': 'This is a test task',
        'deadline': '15.12.2024 14:00',
        'priority': 3,
    }

def test_save_task(mock_cursor, user_id, test_task_data):
    """–¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    save_task(user_id, test_task_data)
    mock_cursor.execute.assert_called_once_with(
        '''INSERT INTO tasks (user_id, title, description, deadline, priority, status, creation_date)
           VALUES (?, ?, ?, ?, ?, ?, ?)''',
        (user_id, 'Test Task', 'This is a test task', '15.12.2024 14:00', 3, 'active', pytest.any(str))
    )

def test_format_deadline_valid_date():
    """–¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π."""
    result = format_deadline("15.12.2024 14:00")
    assert result == "15.12.2024 14:00"

def test_format_deadline_invalid_date():
    """–¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π."""
    with pytest.raises(ValueError, match="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"):
        format_deadline("invalid_date")

def test_get_activity_data(mock_cursor, user_id):
    """–¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    mock_cursor.fetchone.side_effect = [(5,), (20,), (100,), (300,)]
    tasks_week, tasks_month, tasks_all_time, pomodoro_minutes = get_activity_data(user_id)
    assert tasks_week == 5
    assert tasks_month == 20
    assert tasks_all_time == 100
    assert pomodoro_minutes == 300
    assert mock_cursor.execute.call_count == 4

@pytest.fixture
def mock_update():
    """–ú–æ–∫ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ Update."""
    update = MagicMock()
    update.message.reply_text = AsyncMock()
    update.message.text = "Test"
    return update

@pytest.fixture
def mock_context():
    """–ú–æ–∫ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ContextTypes."""
    context = MagicMock()
    context.user_data = {}
    return context

@pytest.mark.asyncio
async def test_add_task(mock_update, mock_context):
    """–¢–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    result = await add_task(mock_update, mock_context)
    assert result == 0  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø TITLE
    mock_update.message.reply_text.assert_called_with(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
    )

@pytest.mark.asyncio
async def test_list_tasks_empty(mock_update, mock_context, mock_cursor):
    """–¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)."""
    mock_cursor.fetchall.return_value = []
    await list_tasks(mock_update, mock_context)
    mock_update.message.reply_text.assert_called_once_with("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")

@pytest.mark.asyncio
async def test_list_tasks_with_data(mock_update, mock_context, mock_cursor):
    """–¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏."""
    mock_cursor.fetchall.return_value = [
        ('Task 1', 'Description 1', '15.12.2024 18:00', 3),
        ('Task 2', 'Description 2', '16.12.2024 12:00', 2)
    ]
    await list_tasks(mock_update, mock_context)
    mock_update.message.reply_text.assert_called_once_with(
        "üìå *Task 1*\nüìù Description 1\n‚è∞ –î–µ–¥–ª–∞–π–Ω: 15.12.2024 18:00\nüî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 3\n\n"
        "üìå *Task 2*\nüìù Description 2\n‚è∞ –î–µ–¥–ª–∞–π–Ω: 16.12.2024 12:00\nüî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 2",
        parse_mode='Markdown'
    )